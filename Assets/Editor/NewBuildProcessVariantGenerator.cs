using System;
using System.Collections.Generic;
using System.IO;
using System.Text;
using UnityEditor;

namespace Editor.BuildAndDeploy
{
    /// <summary>
    /// This class is just used within the package environment to auto generate the buildTarget variants within the package as extra code
    /// </summary>
    internal static class NewBuildProcessVariantGenerator
    {
        private static readonly string outputPath = "Packages/com.endava.buildanddeploy/Editor/Core/BuildProcessVariants.cs";
        private static readonly HashSet<BuildTarget> excludedBuildTargets = new () { 
            BuildTarget.NoTarget, 
        };

        private static readonly string mainFileTemplate = @"
//<auto-generated>
// This code was generated by a tool.
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//</auto-generated>

using System.IO;
using UnityEditor;

namespace Endava.BuildAndDeploy
{
    public static class BuildProcessVariants
    {
        #PROCESSVARIANTS#
    }
}
";

        private static readonly string processVariantTemplate = @"
        [MenuItem(""Assets/Create/Build and Deploy/BuildProcess (Variant)/#FLAVOR#"")]
        private static void CreateBuildProcess#FLAVOR#()
        {
            var process = ObjectFactory.CreateInstance<BuildProcess>();
            
            string directory = ""Assets"";
            string assetName = ""Process-#FLAVOR#.asset"";
            process.EnableFromInspector();
            process.Main.Target = BuildTarget.#FLAVOR#;
            process.Main.DeploymentPath = ""Builds/#FLAVOR#/"";
            string path = Path.Combine(directory, assetName);
            AssetDatabase.CreateAsset(process, path);
        }
";

        [MenuItem("Window/Build and Deploy/Generate build variants")]
        private static void GenerateBuildProcessVariants()
        {
            // check for folder
            var path = new DirectoryInfo(Path.GetDirectoryName(outputPath));
            if (!path.Exists)
                Directory.CreateDirectory(path.FullName);

            // fill the initial file template
            var fileContent = mainFileTemplate;

            // replace each variant of BuildTarget enum (excluding "Obsolete" and excludeList entries)
            StringBuilder variants = new StringBuilder();
            foreach(var buildTarget in Enum.GetNames(typeof(BuildTarget)))
            {
                var field = typeof(BuildTarget).GetField(buildTarget);
                if (field.IsDefined(typeof(ObsoleteAttribute), false)) continue;
                if (excludedBuildTargets.Contains(Enum.Parse<BuildTarget>(buildTarget))) continue;

                var variant = processVariantTemplate;
                variant = variant.Replace("#FLAVOR#", buildTarget.ToString());

                variants.Append(variant);
                variants.AppendLine("");
            }

            // write variants into file content
            fileContent = fileContent.Replace("#PROCESSVARIANTS#", variants.ToString());

            // write/overwrite file within package
            File.WriteAllText(outputPath, fileContent);
            AssetDatabase.Refresh();
        }        
    }
}